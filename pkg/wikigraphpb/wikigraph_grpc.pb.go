// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/wikigraphpb/wikigraph.proto

package wikigraphpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WikiGraphClient is the client API for WikiGraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WikiGraphClient interface {
	// Enqueue a task to find the shortest path between two wikipedia pages.
	FindShortestPath(ctx context.Context, in *FindShortestPathRequest, opts ...grpc.CallOption) (*FindShortestPathResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
}

type wikiGraphClient struct {
	cc grpc.ClientConnInterface
}

func NewWikiGraphClient(cc grpc.ClientConnInterface) WikiGraphClient {
	return &wikiGraphClient{cc}
}

func (c *wikiGraphClient) FindShortestPath(ctx context.Context, in *FindShortestPathRequest, opts ...grpc.CallOption) (*FindShortestPathResponse, error) {
	out := new(FindShortestPathResponse)
	err := c.cc.Invoke(ctx, "/wikigraph.WikiGraph/FindShortestPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiGraphClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/wikigraph.WikiGraph/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WikiGraphServer is the server API for WikiGraph service.
// All implementations must embed UnimplementedWikiGraphServer
// for forward compatibility
type WikiGraphServer interface {
	// Enqueue a task to find the shortest path between two wikipedia pages.
	FindShortestPath(context.Context, *FindShortestPathRequest) (*FindShortestPathResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	mustEmbedUnimplementedWikiGraphServer()
}

// UnimplementedWikiGraphServer must be embedded to have forward compatible implementations.
type UnimplementedWikiGraphServer struct {
}

func (UnimplementedWikiGraphServer) FindShortestPath(context.Context, *FindShortestPathRequest) (*FindShortestPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindShortestPath not implemented")
}
func (UnimplementedWikiGraphServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedWikiGraphServer) mustEmbedUnimplementedWikiGraphServer() {}

// UnsafeWikiGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WikiGraphServer will
// result in compilation errors.
type UnsafeWikiGraphServer interface {
	mustEmbedUnimplementedWikiGraphServer()
}

func RegisterWikiGraphServer(s grpc.ServiceRegistrar, srv WikiGraphServer) {
	s.RegisterService(&WikiGraph_ServiceDesc, srv)
}

func _WikiGraph_FindShortestPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindShortestPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiGraphServer).FindShortestPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wikigraph.WikiGraph/FindShortestPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiGraphServer).FindShortestPath(ctx, req.(*FindShortestPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiGraph_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiGraphServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wikigraph.WikiGraph/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiGraphServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WikiGraph_ServiceDesc is the grpc.ServiceDesc for WikiGraph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WikiGraph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wikigraph.WikiGraph",
	HandlerType: (*WikiGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindShortestPath",
			Handler:    _WikiGraph_FindShortestPath_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _WikiGraph_GetTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/wikigraphpb/wikigraph.proto",
}
